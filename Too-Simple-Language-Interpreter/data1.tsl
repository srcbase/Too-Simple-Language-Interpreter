fun create_bst(value, lc, rc) => {
    var temp = () => value;
    var insert = (val) => {
        if (val < value) {
            if (lc == null) {
                lc = create_bst(val, null, null);
            }
            else {
                lc.insert(val);
            }
        }
        else {
            if (rc == null) {
                rc = create_bst(val, null, null);
            }
            else {
                rc.insert(val);
            }
        }
    };
    var check = (val) => {
        if (val == value) {
            ret;
        }
        if (is_unsafe()) {
            rebuild();
            ret;
        }
        if (val < value) {
            check(lc);
        }
        else {
            check(rc);
        }
    };
    var is_unsafe = () => {
        ret rc.size * 2 > size + 2 || lc.size * 2 > size + 2;
    };
    var divide_bst = (ary, l, r) => {
        if (l >= r) {
            ret null;
        }
        var mid = (l + r) / 2;
        ret create_bst(ary[mid], divide_bst(ary, l, mid), divide_bst(ary, mid + 1, r));
    };
    var rebuild = () => {
        var ary = run();
        var temp2 = rebuild(ary, 0, ary.length);
        lc = temp2.lc;
        rc = temp2.rc;
        value = temp2.value;
        size = temp2.size;
    };
    var run = () => {
        var tl, tr;
        if (lc == null) tl = []; else tl = [lc.run()];
        if (rc == null) tr = []; else tr = [rc.run()];
        ret tl + [value] + tr;
    };
    var to_ary = () => {
        var tl, tr;
        if (lc == null) tl = []; else tl = lc.to_ary();
        if (rc == null) tr = []; else tr = rc.to_ary();
        ret tl + [value] + tr;
    };
    ret temp;
}

fun build_bst(array) => {
    if (array.length == 0) ret null;
    var result = create_bst(array[0], null, null);
    for (var i = 1; i < array.length; i += 1) {
        result.insert(array[i]);
    }
    ret result;
}

var test_ary = [45, 2, 344, 766, 4, 56, 1 ,678];